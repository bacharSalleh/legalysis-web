generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model File {
  id             String   @id @default(cuid())
  path           String
  status         String   @default("to_process")
  isEmailSent    Boolean  @default(false)
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  fileType       FileType @default(OTHER)
  skip           Int      @default(0)
  openai_key     String?
  taskType       String   @default("analysis")
  resultPath     String?
  keyName        String?
  taskName       String?
  errorReason    String?
  creditsConsume Int      @default(0)
  source         String   @default("website")

  @@index([status])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  credits       Int       @default(0)
  apiKey        String?
  updatedAt     DateTime  @default(now()) @updatedAt

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AccessKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  worker_id String?
  updatedAt DateTime @default(now()) @updatedAt
}

enum FileType {
  PDF
  DOCX
  OTHER
}

model Waitlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @db.VarChar(200)
}

model WaitlistLegalysis {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique @db.VarChar(200)

  @@index([email])
}
